import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { GrammarSpecContext } from "./ANTLRv4Parser";
import { GrammarTypeContext } from "./ANTLRv4Parser";
import { PrequelConstructContext } from "./ANTLRv4Parser";
import { OptionsSpecContext } from "./ANTLRv4Parser";
import { OptionContext } from "./ANTLRv4Parser";
import { OptionValueContext } from "./ANTLRv4Parser";
import { DelegateGrammarsContext } from "./ANTLRv4Parser";
import { DelegateGrammarContext } from "./ANTLRv4Parser";
import { TokensSpecContext } from "./ANTLRv4Parser";
import { ChannelsSpecContext } from "./ANTLRv4Parser";
import { IdListContext } from "./ANTLRv4Parser";
import { NamedActionContext } from "./ANTLRv4Parser";
import { ActionScopeNameContext } from "./ANTLRv4Parser";
import { ActionBlockContext } from "./ANTLRv4Parser";
import { ArgActionBlockContext } from "./ANTLRv4Parser";
import { ModeSpecContext } from "./ANTLRv4Parser";
import { RulesContext } from "./ANTLRv4Parser";
import { RuleSpecContext } from "./ANTLRv4Parser";
import { ParserRuleSpecContext } from "./ANTLRv4Parser";
import { ExceptionGroupContext } from "./ANTLRv4Parser";
import { ExceptionHandlerContext } from "./ANTLRv4Parser";
import { FinallyClauseContext } from "./ANTLRv4Parser";
import { RulePrequelContext } from "./ANTLRv4Parser";
import { RuleReturnsContext } from "./ANTLRv4Parser";
import { ThrowsSpecContext } from "./ANTLRv4Parser";
import { LocalsSpecContext } from "./ANTLRv4Parser";
import { RuleActionContext } from "./ANTLRv4Parser";
import { RuleModifiersContext } from "./ANTLRv4Parser";
import { RuleModifierContext } from "./ANTLRv4Parser";
import { RuleBlockContext } from "./ANTLRv4Parser";
import { RuleAltListContext } from "./ANTLRv4Parser";
import { LabeledAltContext } from "./ANTLRv4Parser";
import { LexerRuleSpecContext } from "./ANTLRv4Parser";
import { LexerRuleBlockContext } from "./ANTLRv4Parser";
import { LexerAltListContext } from "./ANTLRv4Parser";
import { LexerAltContext } from "./ANTLRv4Parser";
import { LexerElementsContext } from "./ANTLRv4Parser";
import { LexerElementContext } from "./ANTLRv4Parser";
import { LabeledLexerElementContext } from "./ANTLRv4Parser";
import { LexerBlockContext } from "./ANTLRv4Parser";
import { LexerCommandsContext } from "./ANTLRv4Parser";
import { LexerCommandContext } from "./ANTLRv4Parser";
import { LexerCommandNameContext } from "./ANTLRv4Parser";
import { LexerCommandExprContext } from "./ANTLRv4Parser";
import { AltListContext } from "./ANTLRv4Parser";
import { AlternativeContext } from "./ANTLRv4Parser";
import { ElementContext } from "./ANTLRv4Parser";
import { LabeledElementContext } from "./ANTLRv4Parser";
import { EbnfContext } from "./ANTLRv4Parser";
import { BlockSuffixContext } from "./ANTLRv4Parser";
import { EbnfSuffixContext } from "./ANTLRv4Parser";
import { LexerAtomContext } from "./ANTLRv4Parser";
import { AtomContext } from "./ANTLRv4Parser";
import { NotSetContext } from "./ANTLRv4Parser";
import { BlockSetContext } from "./ANTLRv4Parser";
import { SetElementContext } from "./ANTLRv4Parser";
import { BlockContext } from "./ANTLRv4Parser";
import { RulerefContext } from "./ANTLRv4Parser";
import { CharacterRangeContext } from "./ANTLRv4Parser";
import { TerminalRuleContext } from "./ANTLRv4Parser";
import { ElementOptionsContext } from "./ANTLRv4Parser";
import { ElementOptionContext } from "./ANTLRv4Parser";
import { IdentifierContext } from "./ANTLRv4Parser";
export interface ANTLRv4ParserVisitor<Result> extends ParseTreeVisitor<Result> {
    visitGrammarSpec?: (ctx: GrammarSpecContext) => Result;
    visitGrammarType?: (ctx: GrammarTypeContext) => Result;
    visitPrequelConstruct?: (ctx: PrequelConstructContext) => Result;
    visitOptionsSpec?: (ctx: OptionsSpecContext) => Result;
    visitOption?: (ctx: OptionContext) => Result;
    visitOptionValue?: (ctx: OptionValueContext) => Result;
    visitDelegateGrammars?: (ctx: DelegateGrammarsContext) => Result;
    visitDelegateGrammar?: (ctx: DelegateGrammarContext) => Result;
    visitTokensSpec?: (ctx: TokensSpecContext) => Result;
    visitChannelsSpec?: (ctx: ChannelsSpecContext) => Result;
    visitIdList?: (ctx: IdListContext) => Result;
    visitNamedAction?: (ctx: NamedActionContext) => Result;
    visitActionScopeName?: (ctx: ActionScopeNameContext) => Result;
    visitActionBlock?: (ctx: ActionBlockContext) => Result;
    visitArgActionBlock?: (ctx: ArgActionBlockContext) => Result;
    visitModeSpec?: (ctx: ModeSpecContext) => Result;
    visitRules?: (ctx: RulesContext) => Result;
    visitRuleSpec?: (ctx: RuleSpecContext) => Result;
    visitParserRuleSpec?: (ctx: ParserRuleSpecContext) => Result;
    visitExceptionGroup?: (ctx: ExceptionGroupContext) => Result;
    visitExceptionHandler?: (ctx: ExceptionHandlerContext) => Result;
    visitFinallyClause?: (ctx: FinallyClauseContext) => Result;
    visitRulePrequel?: (ctx: RulePrequelContext) => Result;
    visitRuleReturns?: (ctx: RuleReturnsContext) => Result;
    visitThrowsSpec?: (ctx: ThrowsSpecContext) => Result;
    visitLocalsSpec?: (ctx: LocalsSpecContext) => Result;
    visitRuleAction?: (ctx: RuleActionContext) => Result;
    visitRuleModifiers?: (ctx: RuleModifiersContext) => Result;
    visitRuleModifier?: (ctx: RuleModifierContext) => Result;
    visitRuleBlock?: (ctx: RuleBlockContext) => Result;
    visitRuleAltList?: (ctx: RuleAltListContext) => Result;
    visitLabeledAlt?: (ctx: LabeledAltContext) => Result;
    visitLexerRuleSpec?: (ctx: LexerRuleSpecContext) => Result;
    visitLexerRuleBlock?: (ctx: LexerRuleBlockContext) => Result;
    visitLexerAltList?: (ctx: LexerAltListContext) => Result;
    visitLexerAlt?: (ctx: LexerAltContext) => Result;
    visitLexerElements?: (ctx: LexerElementsContext) => Result;
    visitLexerElement?: (ctx: LexerElementContext) => Result;
    visitLabeledLexerElement?: (ctx: LabeledLexerElementContext) => Result;
    visitLexerBlock?: (ctx: LexerBlockContext) => Result;
    visitLexerCommands?: (ctx: LexerCommandsContext) => Result;
    visitLexerCommand?: (ctx: LexerCommandContext) => Result;
    visitLexerCommandName?: (ctx: LexerCommandNameContext) => Result;
    visitLexerCommandExpr?: (ctx: LexerCommandExprContext) => Result;
    visitAltList?: (ctx: AltListContext) => Result;
    visitAlternative?: (ctx: AlternativeContext) => Result;
    visitElement?: (ctx: ElementContext) => Result;
    visitLabeledElement?: (ctx: LabeledElementContext) => Result;
    visitEbnf?: (ctx: EbnfContext) => Result;
    visitBlockSuffix?: (ctx: BlockSuffixContext) => Result;
    visitEbnfSuffix?: (ctx: EbnfSuffixContext) => Result;
    visitLexerAtom?: (ctx: LexerAtomContext) => Result;
    visitAtom?: (ctx: AtomContext) => Result;
    visitNotSet?: (ctx: NotSetContext) => Result;
    visitBlockSet?: (ctx: BlockSetContext) => Result;
    visitSetElement?: (ctx: SetElementContext) => Result;
    visitBlock?: (ctx: BlockContext) => Result;
    visitRuleref?: (ctx: RulerefContext) => Result;
    visitCharacterRange?: (ctx: CharacterRangeContext) => Result;
    visitTerminalRule?: (ctx: TerminalRuleContext) => Result;
    visitElementOptions?: (ctx: ElementOptionsContext) => Result;
    visitElementOption?: (ctx: ElementOptionContext) => Result;
    visitIdentifier?: (ctx: IdentifierContext) => Result;
}
