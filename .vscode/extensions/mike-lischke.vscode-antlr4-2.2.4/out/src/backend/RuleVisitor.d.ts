import { AbstractParseTreeVisitor, TerminalNode } from "antlr4ts/tree";
import { ANTLRv4ParserVisitor } from "../parser/ANTLRv4ParserVisitor";
import { ParserRuleSpecContext, RuleAltListContext, LexerRuleSpecContext, LexerAltListContext, LexerAltContext, LexerElementsContext, LexerElementContext, LabeledLexerElementContext, AltListContext, AlternativeContext, ElementContext, LabeledElementContext, EbnfContext, EbnfSuffixContext, LexerAtomContext, AtomContext, NotSetContext, BlockSetContext, CharacterRangeContext, TerminalRuleContext, SetElementContext, ElementOptionsContext } from "../parser/ANTLRv4Parser";
export declare class RuleVisitor extends AbstractParseTreeVisitor<string> implements ANTLRv4ParserVisitor<string> {
    private scripts;
    constructor(scripts: Map<string, string>);
    defaultResult(): string;
    visitParserRuleSpec(ctx: ParserRuleSpecContext): string;
    visitRuleAltList: (ctx: RuleAltListContext) => string;
    visitLexerRuleSpec: (ctx: LexerRuleSpecContext) => string;
    visitLexerAltList: (ctx: LexerAltListContext) => string;
    visitLexerAlt: (ctx: LexerAltContext) => string;
    visitLexerElements: (ctx: LexerElementsContext) => string;
    visitLexerElement: (ctx: LexerElementContext) => string;
    visitLabeledLexerElement: (ctx: LabeledLexerElementContext) => string;
    visitAltList: (ctx: AltListContext) => string;
    visitAlternative: (ctx: AlternativeContext) => string;
    visitElement: (ctx: ElementContext) => string;
    visitElementOptions: (ctx: ElementOptionsContext) => string;
    visitLabeledElement: (ctx: LabeledElementContext) => string;
    visitEbnf: (ctx: EbnfContext) => string;
    visitEbnfSuffix: (ctx: EbnfSuffixContext) => string;
    visitLexerAtom: (ctx: LexerAtomContext) => string;
    visitAtom: (ctx: AtomContext) => string;
    visitNotSet: (ctx: NotSetContext) => string;
    visitBlockSet: (ctx: BlockSetContext) => string;
    visitSetElement: (ctx: SetElementContext) => string;
    visitCharacterRange: (ctx: CharacterRangeContext) => string;
    visitTerminalRule: (ctx: TerminalRuleContext) => string;
    visitTerminal: (node: TerminalNode) => string;
    private escapeTerminal;
}
