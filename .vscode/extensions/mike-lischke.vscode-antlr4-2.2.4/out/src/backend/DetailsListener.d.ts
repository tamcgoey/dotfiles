import { ANTLRv4ParserListener } from "../parser/ANTLRv4ParserListener";
import { LexerRuleSpecContext, ParserRuleSpecContext, TokensSpecContext, ChannelsSpecContext, ModeSpecContext, DelegateGrammarContext, OptionContext, TerminalRuleContext, RulerefContext, BlockContext, AlternativeContext, RuleBlockContext, EbnfSuffixContext, OptionsSpecContext, ActionBlockContext, ArgActionBlockContext, LabeledElementContext, LexerRuleBlockContext, LexerAltContext, ElementContext, LexerElementContext } from "../parser/ANTLRv4Parser";
import { ContextSymbolTable } from "./ContextSymbolTable";
export declare class DetailsListener implements ANTLRv4ParserListener {
    private symbolTable;
    private imports;
    private currentSymbol;
    constructor(symbolTable: ContextSymbolTable, imports: string[]);
    enterLexerRuleSpec(ctx: LexerRuleSpecContext): void;
    enterParserRuleSpec(ctx: ParserRuleSpecContext): void;
    exitParserRuleSpec(ctx: ParserRuleSpecContext): void;
    enterRuleBlock(ctx: RuleBlockContext): void;
    exitRuleBlock(ctx: RuleBlockContext): void;
    enterLexerRuleBlock(ctx: LexerRuleBlockContext): void;
    exitLexerRuleBlock(ctx: LexerRuleBlockContext): void;
    enterBlock(ctx: BlockContext): void;
    exitBlock(ctx: BlockContext): void;
    enterAlternative(ctx: AlternativeContext): void;
    exitAlternative(ctx: AlternativeContext): void;
    enterLexerAlt(ctx: LexerAltContext): void;
    exitLexerAlt(ctx: LexerAltContext): void;
    enterTokensSpec(ctx: TokensSpecContext): void;
    enterTerminalRule(ctx: TerminalRuleContext): void;
    enterRuleref(ctx: RulerefContext): void;
    enterChannelsSpec(ctx: ChannelsSpecContext): void;
    exitModeSpec(ctx: ModeSpecContext): void;
    exitDelegateGrammar(ctx: DelegateGrammarContext): void;
    enterOptionsSpec(ctx: OptionsSpecContext): void;
    exitOption(ctx: OptionContext): void;
    enterEbnfSuffix(ctx: EbnfSuffixContext): void;
    enterActionBlock(ctx: ActionBlockContext): void;
    enterArgActionBlock(ctx: ArgActionBlockContext): void;
    enterLabeledElement(ctx: LabeledElementContext): void;
    exitElement(ctx: ElementContext): void;
    exitLexerElement(ctx: LexerElementContext): void;
}
