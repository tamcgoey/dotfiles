import { RuleStartState } from "antlr4ts/atn";
import { SentenceGenerationOptions, RuleMappings, PredicateEvaluator } from "./facade";
import { InterpreterData } from "./InterpreterDataReader";
import { SourceContext } from "./SourceContext";
export declare class SentenceGenerator {
    private lexerData;
    private parserData;
    predicateEvaluator?: PredicateEvaluator;
    private lexerPredicates;
    private parserPredicates;
    private printableUnicode;
    private convergenceFactor;
    private lexerDecisionCounts;
    private parserDecisionCounts;
    private minParserIterations;
    private maxParserIterations;
    private minLexerIterations;
    private maxLexerIterations;
    private maxRecursions;
    private ruleInvocations;
    private ruleDefinitions;
    private parserStack;
    constructor(context: SourceContext, lexerData: InterpreterData, parserData: InterpreterData | undefined, actionFile: string | undefined);
    generate(options: SentenceGenerationOptions, start: RuleStartState, ruleDefinitions?: RuleMappings): string;
    sempred(ruleIndex: number, predIndex: number, inLexer: boolean): boolean;
    private getRuleName;
    private invokeRule;
    private leaveRule;
    private generateFromATNSequence;
    private generateFromDecisionState;
    private getRandomDecision;
    private loopEnd;
    private blockStart;
    private getIntervalElement;
    private getRandomCharacterFromInterval;
    private getRandomLoopCount;
}
